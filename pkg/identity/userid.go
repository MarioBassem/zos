package identity

import (
	"encoding/json"
	"fmt"

	"github.com/rs/zerolog/log"
	"github.com/tyler-smith/go-bip39"

	"github.com/threefoldtech/zos/pkg/versioned"
)

// UserIdentity defines serializable strict to identify a user
type UserIdentity struct {
	// Seed encoded in base64
	Mnemonic string `json:"mnemonic"`
	// ThreebotID generated by explorer
	ThreebotID uint64 `json:"threebotid"`
	// Internal keypair not exported
	key KeyPair
}

// Key returns the internal KeyPair
func (u *UserIdentity) Key() KeyPair {
	return u.key
}

// SetKey set internal KeyPair from an existing one
func (u *UserIdentity) SetKey(kp KeyPair) {
	u.key = kp
}

// Load fetch a seed file and initialize key based on mnemonic
func (u *UserIdentity) Load(path string) error {
	version, buf, err := versioned.ReadFile(path)
	if err != nil {
		return err
	}

	if version.NE(seedVersionLatest) {
		return fmt.Errorf("unsupported seed version")
	}

	err = json.Unmarshal(buf, &u)
	if err != nil {
		return err
	}

	return u.Initialize()
}

// Loads initialize the Key (KeyPair) from the Mnemonic
func (u *UserIdentity) Initialize() error {
	seed, err := bip39.EntropyFromMnemonic(u.Mnemonic)
	if err != nil {
		return err
	}

	// Loading mnemonic
	u.key, err = FromSeed(seed)
	if err != nil {
		return err
	}

	return nil
}

// SaveUserData dumps UserData into a file
func (u *UserIdentity) Save(path string) error {
	var err error

	log.Info().Msg("generating seed mnemonic")

	// Generate mnemonic of private key
	u.Mnemonic, err = bip39.NewMnemonic(u.key.PrivateKey.Seed())
	if err != nil {
		return err
	}

	// Versioning json output
	buf, err := json.Marshal(u)
	if err != nil {
		return err
	}

	// Saving json to file
	log.Info().Str("filename", path).Msg("writing user identity")
	versioned.WriteFile(path, seedVersion11, buf, 0400)

	return nil
}
