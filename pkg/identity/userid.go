package identity

import (
	"encoding/json"
	"fmt"

	"github.com/rs/zerolog/log"
	"github.com/tyler-smith/go-bip39"

	"github.com/threefoldtech/zos/pkg/versioned"
)

// UserIdentity defines serializable strict to identify a user
type UserIdentity struct {
	// Seed encoded in base64
	Mnemonic string `json:"mnemonic"`
	// ThreebotID generated by explorer
	ThreebotID uint64 `json:"threebotid"`
}

// UserData contains all information needed to identify someone
type UserData struct {
	// Seed is the KeyPair object decoded from seed base64
	Key KeyPair
	// ThreebotID is a copy from file
	ThreebotID uint64
}

// LoadUserIdentity load a UserIdentity from file
func LoadUserIdentity(path string) (UserData, error) {
	// Initializing empty object
	ud := UserData{}

	version, buf, err := versioned.ReadFile(path)
	if err != nil {
		return ud, err
	}

	if version.NE(seedVersionLatest) {
		return ud, fmt.Errorf("unsupported seed version")
	}

	var ui UserIdentity
	err = json.Unmarshal(buf, &ui)
	if err != nil {
		return ud, err
	}

	return LoadUserIdentityObject(&ui)
}

// LoadUserIdentityObject converts a UserIdentity object to UserData
func LoadUserIdentityObject(ui *UserIdentity) (UserData, error) {
	// Initializing empty object
	ud := UserData{}

	seed, err := bip39.EntropyFromMnemonic(ui.Mnemonic)
	if err != nil {
		return ud, err
	}

	// Loading mnemonic
	kp, err := FromSeed(seed)
	if err != nil {
		return ud, err
	}

	// Link keys
	ud.Key = kp

	// Link ThreebotID
	ud.ThreebotID = ui.ThreebotID

	return ud, nil
}

// SaveUserData dumps UserData into a file
func SaveUserData(u *UserData, path string) error {
	log.Info().Msg("generating seed mnemonic")

	// Generate mnemonic of private key
	mnemonic, err := bip39.NewMnemonic(u.Key.PrivateKey.Seed())
	if err != nil {
		return err
	}

	// Fillin serializable struct
	ui := &UserIdentity{
		Mnemonic:   mnemonic,
		ThreebotID: u.ThreebotID,
	}

	// Versioning json output
	buf, err := json.Marshal(ui)
	if err != nil {
		return err
	}

	// Saving json to file
	log.Info().Str("filename", path).Msg("writing user identity")
	versioned.WriteFile(path, seedVersion11, buf, 0400)

	return nil
}
